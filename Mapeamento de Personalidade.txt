import re

# Fun√ß√£o para identificar tra√ßos de personalidade com base nas mensagens
def mapear_personalidade(mensagens):
    # Inicializa um dicion√°rio para contar os tra√ßos
    tra√ßos = {
        "emocional": 0,
        "racional": 0,
        "positivo": 0,
        "negativo": 0,
        "confiante": 0,
        "neutro": 0
    }

    # Palavras-chave associadas a tra√ßos de personalidade
    palavras_emocionais = ["triste", "amo", "chateada", "saudades", "ü•∫", "üò°"]
    palavras_racionais = ["planejar", "resolver", "organizar", "estrat√©gia", "pensar"]
    palavras_positivas = ["feliz", "√≥timo", "bom", "gostei", "üòä"]
    palavras_negativas = ["ruim", "dif√≠cil", "problema", "triste", "üòî"]
    palavras_confian√ßa = ["conseguir", "determina√ß√£o", "certeza", "confian√ßa"]

    for msg in mensagens:
        for palavra in palavras_emocionais:
            if palavra in msg.lower():
                tra√ßos["emocional"] += 1
                break
        for palavra in palavras_racionais:
            if palavra in msg.lower():
                tra√ßos["racional"] += 1
                break
        for palavra in palavras_positivas:
            if palavra in msg.lower():
                tra√ßos["positivo"] += 1
                break
        for palavra in palavras_negativas:
            if palavra in msg.lower():
                tra√ßos["negativo"] += 1
                break
        for palavra in palavras_confian√ßa:
            if palavra in msg.lower():
                tra√ßos["confiante"] += 1
                break
        # Se nenhuma palavra-chave se aplicar, conta como neutro
        else:
            tra√ßos["neutro"] += 1

    return tra√ßos

# Fun√ß√£o para gerar um prompt de personalidade
def gerar_prompt_personalidade(tra√ßos):
    prompt = "Esta √© uma defini√ß√£o da personalidade baseada nas intera√ß√µes:\n\n"

    if tra√ßos["emocional"] > 5:
        prompt += "- Esta pessoa tende a ser bastante **emocional**, expressando seus sentimentos abertamente. Ela valoriza relacionamentos pessoais e frequentemente busca apoio emocional nas intera√ß√µes.\n"

    if tra√ßos["racional"] > 5:
        prompt += "- Embora emocional, ela tamb√©m demonstra um lado **racional**, utilizando planejamento e resolu√ß√£o de problemas como forma de lidar com situa√ß√µes complexas.\n"

    if tra√ßos["positivo"] > 5:
        prompt += "- Seu tom geral √© **positivo**, com uma tend√™ncia a manter otimismo, mesmo em situa√ß√µes dif√≠ceis.\n"

    if tra√ßos["negativo"] > 5:
        prompt += "- Ela demonstra momentos de **negatividade** e frustra√ß√£o, expressando insatisfa√ß√£o com certa frequ√™ncia.\n"

    if tra√ßos["confiante"] > 5:
        prompt += "- A pessoa √© **confiante**, acredita em sua capacidade de superar desafios e se dedica a alcan√ßar seus objetivos.\n"

    if tra√ßos["neutro"] > 5:
        prompt += "- Frequentemente, a comunica√ß√£o √© **neutra**, demonstrando uma abordagem equilibrada em diferentes situa√ß√µes.\n"

    prompt += "\n**Estilo de Comunica√ß√£o:**\n- A pessoa usa um tom casual e leve, muitas vezes incorporando emojis e express√µes para transmitir suas emo√ß√µes. Ela se preocupa com as rela√ß√µes e valoriza o di√°logo aberto.\n"

    return prompt

# Fun√ß√£o principal para processar mensagens e gerar a defini√ß√£o da personalidade
def processar_mensagens(arquivo, filtro):
    try:
        with open(arquivo, 'r', encoding='utf-8') as f:
            linhas = f.readlines()

        mensagens = []
        for linha in linhas:
            if filtro.lower() in linha.lower():
                # Remove data/hora e filtra
                linha_sem_data_hora = re.sub(r"^\d{2}/\d{2}/\d{4} \d{2}:\d{2} - ", '', linha).strip()
                mensagens.append(linha_sem_data_hora)

        if not mensagens:
            return "Nenhuma mensagem encontrada para o filtro especificado."

        tra√ßos = mapear_personalidade(mensagens)
        prompt_personalidade = gerar_prompt_personalidade(tra√ßos)

        return prompt_personalidade

    except FileNotFoundError:
        return "Arquivo n√£o encontrado. Verifique o caminho fornecido."
    except Exception as e:
        return f"Ocorreu um erro: {e}"

# Entrada de dados do usu√°rio
arquivo_txt = input("Digite o caminho do arquivo de texto com as mensagens (ex.: /content/Conversa.txt): ")
filtro_de_busca = input("Digite o nome ou termo para filtrar as mensagens (ex.: Adri): ")

# Processa as mensagens com os dados fornecidos
resultado = processar_mensagens(arquivo_txt, filtro_de_busca)
print(resultado)
